
# Program using MAFIA API as of documentation:
# 
# Counter(lambda(): { n = n + 1 }, n)
# +
# ( 
#   Match( random([0:100] < 25) ) >> Duplicate("samples")
# )
# +
# ( 
#   "samples" 
#   >> Counter(lambda(): { n_samples = n_samples + 1 }, n_samples) 
#   >> Collect(["vlan.vid = 1", "vlan.ether_type = eth.ether_type", "eth.ether_type = 0x8100"]) 
# )
# 

from mafia_lang.primitives import *

# Declares the stream of samples generated by the Duplicate primitive
samples = Stream('samples', 1)
# Declares a 32-bit metadata field "sample_probability" used to hold a random generated number
sample_probability = Random('sample_probability', 32)
# Declares two counters to track the number of total packets seen and the number of samples created
n = Counter('n', 1024, 32)
n_samples = Counter('n_samples', 1024, 32)

n_increment = Counter_op(    'n_increment',   "lambda(): { n = n + 1 }", n )
n_samples_increment = Counter_op(    'n_samples_increment',   "lambda(): { n_samples = n_samples + 1 }", n_samples )

# Random_op generates a random number and stores in a metadata field "sample_probability"
sample = Random_op("sample_probability", 0, 100) \
         >> Match("select_ramdom", "sample_probability < 25", None) \
         >> Duplicate("duplicate", samples)

# Redirect the generated stream of samples to further primitives:
collect = Stream_op("samples", samples) \
          >> n_samples_increment \
          >> Collect("sample",["vlan.vid = 1", "vlan.ether_type = eth.ether_type", "eth.ether_type = 0x8100"])
# The second parameter of Collect above is an array specifying changes to the packet header to allow forwarding to some endpoint.
# In this example, vlan encapsulation is used.

measurement = n_increment + sample + collect
