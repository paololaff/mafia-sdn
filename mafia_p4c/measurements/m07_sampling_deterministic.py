
# Program using MAFIA API as of documentation:
# 
# declare counter delta<32>[1024]
# declare counter m<32>[1024]
# declare counter n<48>[1024]
# 
# ( 
#   Counter(lambda(): { n = n + 1 }, n) 
#   +
#   ( Match(delta < 25) >> Counter(lambda(): { delta = delta + 1 }, delta) )
#   +
#   ( 
#       Match(delta >= 25) >> Match( m < 5) 
#       >> Counter(lambda(): { m = m + 1 }, m) 
#       >> Duplicate("samples") 
#   )
#   +
#   ( 
#       Match(n >= 100) 
#       >> Counter(lambda(): { n = 0 }, n) 
#       >> Counter(lambda(): { m = 0 }, m) 
#       >> Counter(lambda(): { delta = 0 }, delta) 
# )
# +
# ( "samples" >> Collect(["vlan.vid = 1", "vlan.ether_type = eth.ether_type", "eth.ether_type = 0x8100"]) )

from mafia_lang.primitives import *

# Declares the stream of samples generated by the Duplicate primitive
samples = Stream('samples', 1)
m = Counter('m', 1024, 32)
n = Counter('n', 1024, 32)
delta = Counter('delta', 1024, 32)

n_increment     = Counter_op(    'n_increment',   "lambda(): { n = n + 1 }", n )
m_increment     = Counter_op(    'm_increment',    "lambda(): { m = m + 1 }", m )
delta_increment = Counter_op(    'delta_increment',    "lambda(): { delta = delta + 1 }", delta )

n_reset     = Counter_op(    'n_reset',   "lambda(): { n = 0 }", n )
m_reset     = Counter_op(    'm_reset',    "lambda(): { m = 0 }", m )
delta_reset = Counter_op(    'delta_reset',    "lambda(): { delta = 0 }", delta )

reset_counters = Match("reset_counters", "n > 100", None) >> (n_reset + m_reset + delta_reset)

sample = Match("skip_packets", "delta > 25", None) \
                   >> Match("select_sample", "m < 10", None) \
                   >> m_increment \
                   >> Duplicate( "sample", samples)

# Stream_op serves the purpose to redirect a stream of duplicated packets to further primitives (eg: Collect)
collect = Stream_op("samples", samples) \
          >> Collect("samples", ["vlan.vid = 1", "vlan.ether_type = eth.ether_type", "eth.ether_type = 0x8100"])
# The second parameter of Collect above is an array specifying changes to the packet header to allow forwarding to some endpoint.
# In this example, vlan encapsulation is used.

measurement = (n_increment + delta_increment + sample) + reset_counters + collect
